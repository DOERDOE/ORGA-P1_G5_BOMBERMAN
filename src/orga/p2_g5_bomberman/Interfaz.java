/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package orga.p2_g5_bomberman;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import jnpout32.pPort;
import orga.p2_g5_bomberman.objetos.Matriz;

/**
 *
 * @author DOER
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    Thread n;
    public Interfaz() {
        initComponents();
        this.setVisible(true);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Cargar mapa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Jugar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Menu");

        jButton3.setText("Reloj");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jf = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Bomber practice", "bomb");
        jf.setFileFilter(filter);
        jf.setMultiSelectionEnabled(false);
        int r=jf.showOpenDialog(null);
        if(r==JFileChooser.APPROVE_OPTION){
            try{
                File f = jf.getSelectedFile();
                String content = new String ( Files.readAllBytes( Paths.get(f.getAbsolutePath() ) ) );
                Matriz m = new Matriz(content);
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Matriz();
        //n.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
Runnable yu = new Runnable() {
        String x = "";
            long valorTiempoEspera = 450;
            short valor;
            short direccion = 0x378;
            String decision="";
        @Override
            public void run() {
                //lpt = new pPort();
                short relojControl = 7;
                short cero = 0;
                short uno = 1;
                short datum = 0;
                short Addr =889;
                pPort puerto2 = new pPort();

                while(true){
                    datum = (short) puerto2.input(Addr);
                    if(datum==255){
                    try {
                        puerto2.setPin(relojControl, cero);
                        Thread.sleep(30);
                        //empezamos a contar
                        decision="";                        
                     //   datum = (short) lpt.input(Addr);
                        //quito los 1 que pueden venir seguidos 
                        //que forman parte de la bandera de inicio
                        while(datum==255){
                            puerto2.setPin(relojControl, uno);
                            Thread.sleep(valorTiempoEspera);
                            puerto2.setPin(relojControl, cero);
                            Thread.sleep(valorTiempoEspera);
                            datum = (short) puerto2.input(Addr);                            
                        }
                        do{
                            decision+="0";
                            puerto2.setPin(relojControl, uno);
                            Thread.sleep(valorTiempoEspera);
                            puerto2.setPin(relojControl, cero);
                            Thread.sleep(valorTiempoEspera);
                            System.out.println("Ciclo");
                            datum = (short) puerto2.input(Addr);
                        }while(datum!=255);
                            } catch (Exception ex) {
                               // Logger.getLogger(Controlador.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        System.out.println("Decision: "+decision);
                        //decidir que se va a hacer
                        if(decision.equals("00000")){
                            System.out.println("Arriba");
                        }else if(decision.equals("0000")){
                            System.out.println("Abajo");                            
                        }else if(decision.equals("00")){
                            System.out.println("Izquierda");                            
                        }else if(decision.equals("000")){
                            System.out.println("Derecha");                            
                        }else if(decision.equals("0")){
                            System.out.println("Bomba");                            
                        }else{
                            System.out.println("y aqui hubiera puesto mi pausa si tuviera una :'v");
                        }
                        //pulso de reloj hasta que vuelva a ser 0
                        while(datum!=247){
                        try {
                            System.out.println("Regreso a normalidad");
                            puerto2.setPin(relojControl, uno);
                            Thread.sleep(valorTiempoEspera);
                            puerto2.setPin(relojControl, cero);
                            Thread.sleep(valorTiempoEspera);
                            datum = (short) puerto2.input(Addr);                            
                        } catch (Exception ex) {
                            //Logger.getLogger(Controlador.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        }                        
                    }
                        try {
                            puerto2.setPin(relojControl, uno);
                            Thread.sleep(valorTiempoEspera);
                            puerto2.setPin(relojControl, cero);
                            Thread.sleep(valorTiempoEspera);
                        } catch (Exception ex) {
                            System.out.println("Error?");
                        }
                    
                    
                    
                    try {
                      //      System.out.println("Read Port: " + (8) +
                     //     " = " + datum);                
                    } catch (Exception ex) {
                        System.out.println("Error 2");
                    }
                }
            }
        };
        Thread x2 = new Thread(yu);
        x2.start();

//        Runnable r = new Runnable(){
//            public void run(){
//            short pin2 = 4;
//            short pin3 = 2;
//            short cero = 0;
//            short uno = 1;
//            pPort puerto = new pPort();
//            short relojControl = 7;
//                    int cont = 12;
//                    short var = 1;
//                    int i = 0;
//                    short datum;
//                    short Addr=889;
//                while(true){
//                    for(int z=0;z<12;z++){                        
//                        try {
//                            for(int j=0;j<12;j++){                   
//                                if(j%2==0){
//                               //     puerto.setPin(pin2, uno);
//                                    }else{
//                                 //   puerto.setPin(pin2, cero);                                    
//                                }
//                                puerto.setPin(relojControl, uno);
//                                Thread.sleep(750);
//                                puerto.setPin(relojControl, cero);
//                                Thread.sleep(750);
//                            } 
//                        } catch (Exception ex) {
//                            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
//                }
//            };
//
////                    while(true){
////                        try {                   
////                            puerto.setPin(pin2, uno);
////                          //  puerto.setPin(pin2, cero);
////                            puerto.setPin(pin3, uno);
////                            datum = (short) puerto.input(Addr);
////                               // if(i!=datum){
////                                    i=datum;
////                                    System.out.println("Read Port: " + (Addr) +
////                                  " = " + datum);                
////                               // }
////                            Thread.sleep(10);
////                            puerto.setPin(pin3, cero);   
////                            Thread.sleep(10);
////                            datum = (short) puerto.input(Addr);
////                                if(i!=datum){
////                                    i=datum;
////                                    System.out.println("Read Port: " + (Addr) +
////                                  " = " + Integer.toHexString(datum));                
////                                }
////
////                        } catch (Exception ex) {
////                            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
////                        }
////
////                    }
////                }
////        };
////        short pin2 = 2;
////        short pin3 = 3;
////        short cero = 0;
////        short uno = 1;
////        Runnable r2 = new Runnable() {
////        pPort lpt = new pPort();
////        String x = "";
////        short datum = 0;
////        short Addr =888;
////            short valor;
////            pPort puerto = new pPort();
////            short direccion = 0x378;
////            public void run() {
////                while(true){
////                    int i =0;
////                // Notify the console
////                datum = (short) lpt.input(Addr);
////                if(i!=datum){
////                    i=datum;
////                    System.out.println("Read Port: " + (Addr) +
////                  " = " + Integer.toHexString(datum));                
////                }                    
////            }
////                
////            }
////        };
////        Thread x = new Thread(r2);
//        //x.start();
//    
//        };    
//        n=new Thread(r);
//        n.start();
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
